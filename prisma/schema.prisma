generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?       @map("email_verified")
  password       String?
  image          String?
  role           String          @default("user")
  createdAt      DateTime        @default(now())
  accounts       Account[]
  answers        Answer[]
  savedQuestions SavedQuestion[]
  sessions       Session[]
  Vote           Vote[]
}

model Question {
  id         String          @id @default(uuid())
  title      String
  content    String
  category   String[]
  createdAt  DateTime        @default(now())
  answers    Answer[]
  usersSaved SavedQuestion[]
}

model SavedQuestion {
  userId     String
  questionId String
  createdAt  DateTime @default(now())
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, questionId])
}

model Answer {
  id         String   @id @default(uuid())
  content    String
  isOfficial Boolean  @default(false)
  questionId String
  userId     String?
  createdAt  DateTime @default(now())
  question   Question @relation(fields: [questionId], references: [id])
  user       User?    @relation(fields: [userId], references: [id])
  votes      Vote[]
}

model Vote {
  id       String @id @default(uuid())
  answerId String
  userId   String
  value    Int
  answer   Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([answerId, userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id        String         @id @default(cuid())
  name      String         @unique
  questions QuizQuestion[]
}

model QuizQuestion {
  id            String           @id @default(cuid())
  text          String
  type          QuizQuestionType
  categoryName  String
  createdAt     DateTime         @default(now())
  matchingPairs MatchingPair[]
  options       Option[]
  category      Category         @relation(fields: [categoryName], references: [name], onDelete: Cascade)
}

model Option {
  id         String       @id @default(cuid())
  text       String
  isCorrect  Boolean
  questionId String
  question   QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model MatchingPair {
  id         String       @id @default(cuid())
  leftItem   String
  rightItem  String
  questionId String
  question   QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model QuizSession {
  id        String   @id @default(cuid())
  userId    String?
  score     Int
  questions String
  createdAt DateTime @default(now())
}

enum QuizQuestionType {
  MULTIPLE_CHOICE
  MATCHING
}
